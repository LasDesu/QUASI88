
			    Tiny Z80 Disassembler
				  Ver 0.1

				《福永省三》
			     fukuchan@mh1.117.ne.jp


1. このプログラムについて

      このプログラムは、UNIXシステムで動く、低機能 Z80 ディスアセンブラです。

	・バイナリファイルを逆アセンブルします。
	・一度に逆アセンブルできるのは65536バイトまでです。
	・ラベルは自動生成されるほか、自分で指定もできます。
	・ジャンプ先のアドレスが、命令の途中の場合、それを告知します。
	・未定義命令に対応してるはずです。
	・タブ幅を変えられます。
	・情報ファイルを記述すれば、きめ細かな(?)制御ができます。

      注意) かなり適当に作ったので、バグが潜んでいるかもしれません。

      ・このソフトは無保証です。このソフトを使用した事によるいかなる損害も
        作者は保証いたしません。


2. コンパイル＆インストール

   インストーラを用意していませんので、

    % cc -o dasm88 dasm88.c
    
    でコンパイルした後、適当なディレクトリにインストールして下さい。


3. dasm88 の使用方法

    dasm88 [-org n [-size n] ] [-nv] [-t n] [-f config_file] binary_file

	binary_file	… マシン語のバイナリファイル

	-org n		… 逆アセンブルの開始番地。n は、0x0000 〜 0xffff 。
			   省略時は、-org 0x0000 とみなされます。
			   なお、情報ファイルで指定されている場合は、そちら
			   が優先されます。
	-size n		… 逆アセンブルするサイズ。n は、0x0001 〜 0x10000 。
			   省略時は、ファイルの終端まで逆アセンブルされます。
			   このオプションの前に、-org オプションが必要です。
			   なお、情報ファイルで指定されている場合は、そちら
			   が優先されます。
	-nv		… Not Verbose 指定
			   逆アセンブルした結果のソースのみを表示します。
	-t n		… タブ幅を指定します。
			   n は8の倍数とし、省略時は 8 とみなされます。
	-f config_fil	… 設定ファイルがある場合、ファイル名を指定します。

    [実行結果の例]

	% dasm88 -org 0xc000 sample.bin
	C000 7E         L00001:  LD     A,(HL)
	C001 CDD237              CALL   037D2H
	C004 23                  INC    HL
	C005 0B                  DEC    BC
	C006 79                  LD     A,C
	C007 B0                  OR     B
	C008 20F6                JR     NZ,L00001

    -nv オプションをつけると、先頭のアドレスと、それにつづくマシン語コードが
    表示されなくなります。よって、そのまま出力結果をアセンブルすることも
    可能です。



4. 出力のフォーマット

	出力は、以下のフォーマットで行なわれます。


	C000 7E         L00001:  LD     A,(HL)
	C001 CDD237              CALL   037D2H

	ア   コ         ラ	 ニ	オ
	ド   ー		ベ	 モ	ペ
	レ   ド		ル	 ニ	ラ
	ス			 ッ	ン
				 ク	ド


	・アドレスは、-org または、設定ファイルで設定されたアドレスから
	  割り振られます。
	
	・ラベルは、Lxxxxx の形式をとります。xxxxxには、5桁の数値が順番に
	  割り振られ、最大で 16384個まで生成されます。すなわち、ラベル名は
	  L00001〜L16384となります。これを越えた場合、エラーメッセージが
	  表示され、再び L00001 からラベルが割り振られます。
	  また、設定ファイルの設定で任意のアドレスに任意の名前のラベルを
	  つけることができます。任意に設定できるラベル数は 16384個まで、
	  ただしラベルの文字数の総計が32768バイト以内でなくてはなりません。
	  ラベルに使う文字の種類に制限はありません。

	・ニモニック、オペランドは、ザイログ社のZ80ニモニックに準拠して
	  出力されます。(多分 ^_^;)

	・分岐命令のジャンプ先や、設定ファイルでラベルを設定したアドレスには
	  ラベルがつきますが、この時、アドレスが命令の途中に重なるときは、
	  * マークがコードとニモニックの間に表示されます。

	     C000 7E         L00001:  LD     A,(HL)
	     C001 C307C0              JP     L00002 → JP 0C007H
	     C004 23                  INC    HL
	     C005 0B                  DEC    BC
	     C006 CDD237   *          CALL   037D2H → 0C007H番地は、命令の
	     					       途中。こういう場合、
						       * が表示される。

	・設定ファイルで、DB、DW などの疑似命令が設定できますが、その設定
	  したアドレスが、命令の途中に重なる時は、# マークがコードとニモ
	  ニックの間に表示されます。

	     設定ファイルで、0C003H番地を DB 設定にした時、

	     C000 7E         L00001:  LD     A,(HL)
	     C001 C307C0    #         JP     L00002 → 0C003H番地は、命令の
						       途中。こういう場合、
						       # が表示される。

	・上記2項目の状態が重複して起こった場合は、 #* マークがコードと
	  ニモニックの間に表示されます。
	
	・未定義命令や存在しない命令には、ニモニックの前に + マークがつきます。

	     C000 DD7C               +LD     A,IXH
	     C002 FDCB0004           +DB     0FDH,0CBH,000H,004H
	     
	・-nv オプションをつけることにより、*、#、の出力を抑制できますが、
	  + の出力の抑制はできません。


	・未定義命令は以下のものをサポートしています。

		IXH, IXL, IYH, IYL を含む、LD 命令
		IXH, IXL, IYH, IYL を含む、INC/DEC 命令
		IXH, IXL, IYH, IYL を含む、ADD/ADC/SUB/SBC/AND/XOR/OR/CP 命令
	
		EX	DE,IX
		EX	DE,IY
	
		IN	F,(C)
	
		SLL 命令

		LD	(nn),HL 	[ マシン語で、 ED 63 ]
		LD	HL,(nn) 	[ マシン語で、 ED 6B ]


5. 設定ファイルの書式
	
	設定ファイルは、逆アセンブラに対して各種の情報を与える、テキスト
	形式のファイルです。

	1行のフォーマットは、
		命令	開始アドレス(16進数)	終了アドレス(16進数)
	または、	
		命令	開始アドレス(16進数)	#サイズ(16進数)
	です。

	それぞれの間は1個以上のスペース、タブで区切ります。
	アドレス、サイズは16進数で表記します。
	終了アドレス、サイズは命令によっては不要です。
	途中で ; が出てくると、それ以降はコメントとみなします。
	1行は、255文字内とします。


	    設定ファイルの記述例

		ORG	C000	C0FF
		DB	C010	#4	; Check Work
		DC	C020	C027
		DW	C030	#E
		DS	C080	C09F
		LABEL	C040
		PUTC	C050		; Useful function
		END


  5.1) ORG命令
  
  	書式	ORG	開始アドレス	終了アドレス
		ORG	開始アドレス	#サイズ
		
	逆アセンブル際の開始アドレスおよび終了アドレス(またはサイズ)を
	割り振ります。逆アセンブルは、バイナリファイルの先頭から行なわれ
	ますが、その先頭を任意のアドレスとみなすように設定する命令です。
	
	バイナリファイルが ORG命令で設定したサイズよりも小さい時、
	足りないぶんは 00H で補われます。

	バイナリファイルが ORG命令で設定したサイズよりも大きい時、
	バイナリファイルは途中まで読み込まれて、逆アセンブルされます。
	この時の残りのバイナリ部分の逆アセンブルを続けたい時は、
	END 命令を指定した後、再度 ORG 命令を指定します。

  5.2) END命令
  
  	書式	END
	
	設定の終了を示します。ORG〜END で囲まれた設定に従い、逆アセンブル
	を行ないます。
	
	バイナリファイルが ORG命令で設定したサイズよりも大きい時、
	END に続けて ORG 命令を再度設定することにより、引続きバイナリ
	ファイルを逆アセンブルすることができます。
	
  5.3) DB命令
  
  	書式	DB	開始アドレス	終了アドレス
		DB	開始アドレス	#サイズ

	開始アドレスから、終了アドレスまたはサイズ分までを DB 領域に
	指定します。領域は 1〜32 バイト分までです。33バイト以上指定したい
	時は、DB命令を複数指定して下さい。

	    出力例   C010 00010203            DB     00H,01H,02H,03H

  5.4) DC命令

  	書式	DC	開始アドレス	終了アドレス
		DC	開始アドレス	#サイズ

	開始アドレスから、終了アドレスまたはサイズ分までを DB 領域に
	指定します。領域は 1〜32 バイト分までです。33バイト以上指定したい
	時は、DC命令を複数指定して下さい。

	DB命令との違いは、オペランドが文字列で出力されることです。
	ただし、コントロールコードなどの場合は、16進数で出力されます。

	    出力例   C010 41424344            DB     'ABCDEFGHIJK',000H
		     C014 45464748
		     C018 494A4B00

  5.4) DW命令

    	書式	DW	開始アドレス	終了アドレス
		DW	開始アドレス	#サイズ

	開始アドレスから、終了アドレスまたはサイズ分までを DW 領域に
	指定します。領域は 2〜64 バイト分までです。66バイト以上指定したい
	時は、DW命令を複数指定して下さい。
	なお、領域が奇数サイズになるとエラーが出ます。

	    出力例   C010 3412FFFF            DW     01234H,0FFFFH

  5.5) DS命令

    	書式	DS	開始アドレス	終了アドレス
		DS	開始アドレス	#サイズ

	開始アドレスから、終了アドレスまたはサイズ分までを DS 領域に
	指定します。領域は 1〜128 バイト分までです。129バイト以上指定したい
	時は、DS命令を複数指定して下さい。

	DS命令で指定された領域は逆アセンブルされません。

	    出力例   C010 00 *020H            DS     020H

  5.6) LABEL命令

    	書式	LABEL	アドレス

	通常、ラベルは分岐命令のジャンプ先のアドレスに対し自動生成されますが、
	LABEL命令で指定したアドレスには必ずラベルが生成されます。
	
  5.7) 名前つきラベル生成命令
  
	書式	ラベル名	アドレス

	LABEL命令と同じく、指定したアドレスにラベルをつけますが、その時の
	ラベル名を任意に設定することができます。
	ラベル名に使用できる文字列は、他の命令と同じ語でなければなんでも
	構いません。

	名前つきラベルは最大16384個まで生成できます。ただし、ラベル名の
	文字数の総計が 32768個を越えてはいけません。



6. エラーメッセージ

	逆アセンブル中にエラーが出た場合、以下のようなエラーメッセージが
	表示されます。

	エラーメッセージ in 設定ファイルの行番号

	エラーメッセージは以下のとおり。デバッグの名残で、やたらとたくさん
	あります。なお、複数のエラーが見つかった時は、正確なエラーを
	示すことができません。


	ORG: Start is bad
		ORG命令で、アドレスが0x0000-0xffffにない。
	ORG: End or Size is bad
		ORG命令で、サイズが0未満、または0x10000 を越えた。
	ORG: Bad format
		ORG命令で、書式が不正。
	DB: Start is bad
		DB命令で、アドレスが0x0000-0xffffにない。
	DB: End or Size is bad
		DB命令で、サイズが0未満、または 32 を越えた。
	DB Bad format
		DB命令で、書式が不正。
	DC: Start is bad
		DC命令で、アドレスが0x0000-0xffffにない。
	DC: End or Size is bad
		DC命令で、サイズが0未満、または 32 を越えた。
	DC: Bad format
		DC命令で、書式が不正。
	DW: Start is bad
		DW命令で、アドレスが0x0000-0xffffにない。
	DW: End or Size is bad
		DW命令で、サイズが0未満、または 64 を越えた。
	DW: Size is bad
		DW命令で、サイズが奇数になっている。
	DW: Bad format
		DW命令で、書式が不正。
	DS: Start is bad
		DS命令で、アドレスが0x0000-0xffffにない。
	DS: End or Size is bad
		DS命令で、サイズが0未満、または 128 を越えた。
	DS: Bad format
		DS命令で、書式が不正。
	LABEL: Addr is bad
		LABEL命令で、アドレスが0x0000-0xffffにない。
	LABEL: Bad format
		LABEL命令で、書式が不正。
	Users label: Addr is bad
		名前つきラベル生成命令で、アドレスが0x0000-0xffffにない。
	Users label: Bad format
		名前つきラベル生成命令で、書式が不正。
	Users label: Out of label buffer
		名前つきラベル生成命令で、バッファが溢れた。

	    上記のエラーは、逆アセンブルに先だって行なわれる設定ファイルの
	    解析時にでます。

	PC Overflow (>FFFFH)!?
		命令が0FFFFH番地を越えた。
	size mismatch
		命令が指定サイズを跨いでいる

	    上記のエラーは、逆アセンブル中に出ます。エラーが出るまでの、
	    逆アセンブル結果は出力されています。

	Opps! Label number is greater than 16383!
		自動生成のラベルが 16383個を越えた時の警告
		重複するラベル名が生成されるが、処理は続行される。

	Internal Error 番号
		内部エラー。



7. 技術資料 … ソース解読の手引
	プログラムのながれ

	{
		設定ファイルがある時は、解析
		ENDがある場合は、継続ありとみなす
		↓
		バイナリをワーク(64KB)に格納。
		EOFまで読み込む。サイズ指定がある時は、サイズ分
		↓
		ラベルの作成
		↓
		逆アセンブル
		↓
		継続の場合は設定ファイルの解析に戻る
	}
	
    ※設定ファイルの解析
        ORG	→ アセンブルの開始アドレス、サイズを設定
	END	→ 解析終了
	DB,DW,DS→ attr[] の設定
	LABEL	→ label[]の設定


	attr[]の内容
	
	attr[xxx] ← xxx はアドレス。0〜0xffff

	     0x00		オペコード(初期値)
	     0x20 + 0〜31	DB疑似命令(このアドレス以降、1〜 32バイト続く)
	     0x40 + 0〜31	DC疑似命令(このアドレス以降、1〜 32バイト続く)
	     0x60 + 0〜31	DW疑似命令(このアドレス以降、2〜 62バイト続く)
	     0x80 + 0〜127	DS疑似命令(このアドレス以降、1〜128バイト続く)


	label[]の内容

	label[xxx] ← xxx はアドレス。0〜0xffff

	     0x0000		ラベルなし(初期値)
	     0x4000 + 0〜16383	自動生成ラベルのラベル番号
	     0x8000 + 0〜32767	ユーザラベルのラベル名バッファのポインタ


		自動生成ラベルのラベル番号はここではつけない。
		0x4000 だけを設定する。
		
		ユーザラベルの場合、設定したラベルの文字列は、
			&label_buf[xxx]
		に格納される。label_buf は 32768 バイトの容量を持ち、
		ユーザラベルの文字列が連続して格納されている。
		(ただし、文字列は、'\0'を含む)。この、xxx が
		ユーザラベルのラベル名バッファのポインタ となる。
		正確には、ポインタではなく、label_buf[] の要素番号である。


    ※ラベルの作成

	逆アセンブルを行ない、ジャンプ命令や、直接アドレッシング命令で
	指定してあるアドレスを計算し、label[xxx] に 0x4000 を格納する。
	
	次に、label[] が 0x4000 である要素全てに、順にラベル番号(1〜16383)
	を振る。
	

    ※逆アセンブル

	逆アセンブルは、単純にテーブルからニモニックの文字列を引っ張って
	きて、表示させるだけである。
	
	attr[] を調べて、オペコードの時は、ニモニック文字列を表示。
	疑似命令の時は、それを表示

	その時、label[] を調べ、自動生成ラベルの時は、label[] に設定された
	ラベル番号を、ユーザラベルの時は、&label_buf[ label[] ] に設定
	された文字列を表示する。
	
	ラベルと命令が重なってないかのチェックもあわせて行なう。



8. 履歴

  0.1	OUT (C),F           の追加
	EX DE,IX / EX DE,IY の削除
	NEG/RETI/RETM/IM    の割当を、未定義コード部分に拡張
	BIT n,(IX/IY +d)    の割当を、未定義コード部分に拡張
	FD、DD で始まるコードの未定義部分対応
	バグとり

  0.0	最初のリリース
